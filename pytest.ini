[tool:pytest]
# Phase 5: Testing Implementation Configuration
# Comprehensive testing suite for the Inventory Management System

# Test discovery
testpaths = backend/tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for test categorization
markers =
    # Test types
    unit: Unit tests that test individual components in isolation
    integration: Integration tests that test component interactions
    slow: Performance tests that may take longer to run
    
    # Component-specific markers
    database: Database-related tests
    repositories: Repository pattern tests
    migrations: Migration system tests
    query_builder: Query builder tests
    services: Service layer tests
    api: API endpoint tests
    auth: Authentication and authorization tests
    
    # Test categories
    smoke: Basic functionality tests
    regression: Tests for previously fixed bugs
    edge_case: Tests for edge cases and boundary conditions
    performance: Performance and load testing
    
    # Skip conditions
    skip: Tests to be skipped
    skip_if_no_db: Tests that require database connection
    skip_if_no_redis: Tests that require Redis connection

# Test execution options
addopts = 
    -v                          # Verbose output
    --tb=short                 # Short traceback format
    --strict-markers           # Strict marker validation
    --disable-warnings         # Disable warning display
    --maxfail=10              # Stop after 10 failures
    --durations=10            # Show 10 slowest test durations
    
    # Coverage options (when pytest-cov is available)
    --cov=backend             # Measure coverage of backend package
    --cov-report=term-missing # Show missing lines in terminal
    --cov-report=html         # Generate HTML coverage report
    --cov-fail-under=80       # Fail if coverage is below 80%
    
    # Test discovery options
    --ignore=venv             # Ignore virtual environment
    --ignore=__pycache__      # Ignore Python cache
    --ignore=*.pyc            # Ignore compiled Python files

# Test filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning

# Environment variables for tests
env =
    TESTING = true
    DATABASE_URL = postgresql://test_user:test_password@localhost:5432/inventory_test
    FLASK_ENV = testing
    LOG_LEVEL = DEBUG

# Test timeout (requires pytest-timeout)
timeout = 300

# Parallel execution (requires pytest-xdist)
# addopts = -n auto

# Test result caching (requires pytest-cache)
# cache_dir = .pytest_cache

# Minimum version requirements
minversion = 6.0

# Console output
console_output_style = classic

# Test collection
collect_ignore =
    venv/
    __pycache__/
    *.pyc
    .git/
    .pytest_cache/
    htmlcov/
    .coverage
