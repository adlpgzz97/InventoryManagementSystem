"""
Environment Setup Script
Helps users set up their environment variables for the Inventory Management System
"""

import os
import sys
from pathlib import Path
import getpass

def create_env_file():
    """Create .env file with user input"""
    print("Inventory Management System - Environment Setup")
    print("=" * 60)
    print("This script will help you create a .env file with your configuration.")
    print("Press Enter to use default values (shown in brackets).")
    print()
    
    # Get current directory
    current_dir = Path(__file__).parent
    env_file = current_dir / '.env'
    
    # Check if .env already exists
    if env_file.exists():
        overwrite = input(f"WARNING: .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("ERROR: Setup cancelled")
            return False
    
    # Collect configuration values
    config = {}
    
    print("Database Configuration:")
    config['DB_HOST'] = input(f"Database host [{os.environ.get('DB_HOST', 'localhost')}]: ").strip() or os.environ.get('DB_HOST', 'localhost')
    config['DB_PORT'] = input(f"Database port [{os.environ.get('DB_PORT', '5432')}]: ").strip() or os.environ.get('DB_PORT', '5432')
    config['DB_NAME'] = input(f"Database name [{os.environ.get('DB_NAME', 'inventory_db')}]: ").strip() or os.environ.get('DB_NAME', 'inventory_db')
    config['DB_USER'] = input(f"Database user [{os.environ.get('DB_USER', 'postgres')}]: ").strip() or os.environ.get('DB_USER', 'postgres')
    
    # Get password securely
    while True:
        password = getpass.getpass("Database password: ")
        if password:
            config['DB_PASSWORD'] = password
            break
        else:
            print("ERROR: Database password is required!")
    
    print("\nApplication Configuration:")
    config['APP_HOST'] = input(f"Application host [{os.environ.get('APP_HOST', '127.0.0.1')}]: ").strip() or os.environ.get('APP_HOST', '127.0.0.1')
    config['APP_PORT'] = input(f"Application port [{os.environ.get('APP_PORT', '5001')}]: ").strip() or os.environ.get('APP_PORT', '5001')
    
    print("\nSecurity Configuration:")
    secret_key = os.environ.get('SECRET_KEY', '')
    if not secret_key:
        import secrets
        secret_key = secrets.token_urlsafe(32)
        print(f"Generated secret key: {secret_key[:20]}...")
    
    config['SECRET_KEY'] = input(f"Secret key [{secret_key[:20]}...]: ").strip() or secret_key
    
    print("\nEnvironment Settings:")
    config['FLASK_ENV'] = input(f"Flask environment [development]: ").strip() or 'development'
    config['FLASK_DEBUG'] = input(f"Debug mode (True/False) [True]: ").strip() or 'True'
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write("# Inventory Management System - Environment Configuration\n")
            f.write("# Generated by setup_environment.py\n\n")
            
            f.write("# Database Configuration\n")
            f.write(f"DB_HOST={config['DB_HOST']}\n")
            f.write(f"DB_PORT={config['DB_PORT']}\n")
            f.write(f"DB_NAME={config['DB_NAME']}\n")
            f.write(f"DB_USER={config['DB_USER']}\n")
            f.write(f"DB_PASSWORD={config['DB_PASSWORD']}\n\n")
            
            f.write("# Application Configuration\n")
            f.write(f"APP_HOST={config['APP_HOST']}\n")
            f.write(f"APP_PORT={config['APP_PORT']}\n\n")
            
            f.write("# Security Configuration\n")
            f.write(f"SECRET_KEY={config['SECRET_KEY']}\n\n")
            
            f.write("# Environment Settings\n")
            f.write(f"FLASK_ENV={config['FLASK_ENV']}\n")
            f.write(f"FLASK_DEBUG={config['FLASK_DEBUG']}\n")
        
        print(f"\nSUCCESS: .env file created successfully at {env_file}")
        return True
        
    except Exception as e:
        print(f"ERROR: Error creating .env file: {e}")
        return False

def validate_setup():
    """Validate the setup by running the configuration validator"""
    print("\nValidating configuration...")
    
    try:
        # Run the configuration validator
        backend_dir = Path(__file__).parent / 'backend'
        validator_script = backend_dir / 'validate_config.py'
        
        if validator_script.exists():
            import subprocess
            result = subprocess.run([sys.executable, str(validator_script)], 
                                 capture_output=True, text=True, cwd=str(backend_dir))
            
            if result.returncode == 0:
                print("SUCCESS: Configuration validation passed!")
                return True
            else:
                print("ERROR: Configuration validation failed:")
                print(result.stdout)
                print(result.stderr)
                return False
        else:
            print("WARNING: Configuration validator not found, skipping validation")
            return True
            
    except Exception as e:
        print(f"ERROR: Error during validation: {e}")
        return False

def main():
    """Main setup function"""
    try:
        if create_env_file():
            if validate_setup():
                print("\nSUCCESS: Environment setup completed successfully!")
                print("\nNext steps:")
                print("1. Start your PostgreSQL database")
                print("2. Run: python main.py")
                print("3. Or run: python backend/app.py")
            else:
                print("\nWARNING: Setup completed but validation failed.")
                print("Please check your configuration and try again.")
        else:
            print("\nERROR: Setup failed. Please try again.")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\nERROR: Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nERROR: Unexpected error during setup: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
